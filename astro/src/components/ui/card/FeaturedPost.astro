---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../../FormattedDate.astro";
import { slugifyTag as slugify } from "@lib/slug";

interface Props {
  post: CollectionEntry<"blog">;
  readingTimeMin?: number;
}
const { post, readingTimeMin = 0 } = Astro.props as Props;
---

<section class="container">
  <div class="post-card">
    {
      post.data.heroImage && (
        <div class="post-card-image">
          <div class="image-wrapper">
            <Image
              width={1200}
              height={630}
              src={post.data.heroImage}
              alt={post.data.title}
            />
          </div>
        </div>
      )
    }
    <div class="post-card-body">
      <div class="post-meta">
        <span class="tag featured"><span class="star">★</span> Featured</span>
      </div>

      <h3 class="post-title">{post.data.title}</h3>

      {
        post.data.description && (
          <p class="post-description">{post.data.description}</p>
        )
      }

      <div class="post-details">
        <FormattedDate date={post.data.pubDate} />
        <span>•</span>
        <a
          href={`/blog/author/${slugify(post.data.author || "Site Author")}/`}
          class="author-link"
        >
          {post.data.author || "Site Author"}
        </a>
        {
          readingTimeMin > 0 && (
            <>
              <span>•</span>
              <span class="reading-time">
                <svg
                  viewBox="0 0 24 24"
                  width="14"
                  height="14"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  aria-hidden="true"
                >
                  <circle cx="12" cy="12" r="9" />
                  <path d="M12 7v5l3 3" />
                </svg>
                {readingTimeMin} min read
              </span>
            </>
          )
        }
      </div>

      {
        post.data.tags && post.data.tags.length > 0 && (
          <div class="tags">
            {post.data.tags.map((t) => (
              <a
                href={`/blog/tag/${t.replace(/\s+/g, "-").toLowerCase()}/`}
                class="tag"
              >
                {t}
              </a>
            ))}
          </div>
        )
      }
    </div>
    <a
      href={`/blog/${post.id}/`}
      class="stretched-link"
      aria-label={post.data.title}></a>
  </div>
</section>

<style>
  .post-card {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.25rem;
    align-items: start;
    position: relative;
    padding: 1.25rem;
    border-radius: 0.75rem;
    background: var(--panel-color, #fff);
    border: 1px solid rgba(0, 0, 0, 0.05);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.05);
    transition:
      transform 0.25s ease,
      box-shadow 0.25s ease;
  }

  .post-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 18px rgba(0, 0, 0, 0.1);
  }

  @media (min-width: 768px) {
    .post-card {
      grid-template-columns: 1fr 2fr;
      gap: 2rem;
      padding: 1.5rem;
    }
  }

  /* Imagen */
  .post-card-image {
    position: relative;
    overflow: hidden;
    border-radius: 0.5rem;
  }

  .image-wrapper {
    aspect-ratio: 16/9;
    width: 100%;
    min-height: 200px;
  }

  .post-card img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.4s ease;
  }

  .post-card:hover img {
    transform: scale(1.05);
  }

  /* Body */
  .post-card-body {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  /* Meta */
  .post-meta {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--color-text-muted);
  }

  .tag.featured {
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
    padding: 0.2rem 0.6rem;
    border: 1px solid var(--accent);
    border-radius: 9999px;
    font-size: 0.7rem;
    font-weight: 600;
    color: var(--accent);
    background: rgba(var(--accent-rgb), 0.05);
  }

  .tag.featured .star {
    color: var(--accent);
  }

  /* Title */
  .post-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--foreground);
    margin: 0;
    line-height: 1.3;
    transition: color 0.2s ease;
  }

  .post-title:hover {
    color: var(--accent);
  }

  @media (min-width: 768px) {
    .post-title {
      font-size: 1.875rem;
    }
  }

  /* Description */
  .post-description {
    color: var(--color-text-secondary);
    font-size: 1rem;
    line-height: 1.6;
    margin: 0;
  }

  /* Details */
  .post-details {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    font-size: 0.85rem;
    color: var(--color-text-muted);
  }

  .post-details .author-link {
    color: inherit;
    text-decoration: none;
    font-weight: 500;
  }

  .post-details .author-link:hover {
    color: var(--accent);
  }

  .reading-time {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  /* Tags */
  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    display: inline-block;
    padding: 0.25rem 0.6rem;
    font-size: 0.75rem;
    border-radius: 9999px;
    background: rgba(var(--accent-rgb), 0.1);
    color: var(--accent);
    text-decoration: none;
    font-weight: 500;
    transition:
      background 0.2s ease,
      transform 0.2s ease;
  }

  .tag:hover {
    background: rgba(var(--accent-rgb), 0.2);
    transform: translateY(-1px);
  }

  /* Stretched link */
  .stretched-link {
    position: absolute;
    inset: 0;
    z-index: 1;
  }
</style>
