---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../../FormattedDate.astro";
import { calculateReadingTimeFromMarkdown } from "../../../lib/reading";
import { slugifyTag as slugify } from "../../../lib/slug";

interface Props {
  post: CollectionEntry<"blog">;
}
const { post } = Astro.props as Props;

let readingTimeMin = 0;
try {
  // @ts-ignore
  const md = (post as any).body ?? "";
  readingTimeMin = calculateReadingTimeFromMarkdown(
    md || post.data.description || "",
  );
} catch {}
---

<article class="card">
  {
    post.data.heroImage && (
      <Image
        width={640}
        height={360}
        src={post.data.heroImage}
        alt={post.data.title}
      />
    )
  }
  <h3 class="card-title">{post.data.title}</h3>
  <p class="card-description">{post.data.description}</p>

  <div class="card-meta">
    <div>
      <a
        href={`/blog/author/${slugify(post.data.author || "Site Author")}/`}
        class="author-link"
      >
        {post.data.author || "Site Author"}
      </a>
    </div>
    <div>
      <FormattedDate date={post.data.pubDate} />
    </div>
    {
      readingTimeMin > 0 && (
        <div class="reading-time">
          <svg
            viewBox="0 0 24 24"
            width="14"
            height="14"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            aria-hidden="true"
          >
            <circle cx="12" cy="12" r="9" />
            <path d="M12 7v5l3 3" />
          </svg>
          {readingTimeMin} min read
        </div>
      )
    }
  </div>

  {
    post.data.tags && post.data.tags.length > 0 && (
      <div class="tags">
        {post.data.tags.map((t) => (
          <a
            href={`/blog/tags/${t.replace(/\s+/g, "-").toLowerCase()}/`}
            class="tag"
          >
            {t}
          </a>
        ))}
      </div>
    )
  }

  <a
    href={`/blog/${post.id}/`}
    class="stretched-link"
    aria-label={post.data.title}></a>
</article>

<style>
  .reading-time {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    border-radius: 0.375rem;
    background: rgba(var(--accent-rgb), 0.1);
    color: var(--accent);
    text-decoration: none;
    transition: background 0.2s ease;
  }

  .tag:hover {
    background: rgba(var(--accent-rgb), 0.2);
  }

  .stretched-link {
    position: absolute;
    inset: 0;
    z-index: 1;
  }
  .card img {
    width: 100%;
    height: auto;
    display: block;
    object-fit: cover;
    aspect-ratio: 16 / 9;
    border-radius: 0.5rem;
  }
</style>
